CREATE SEQUENCE Secao_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE Genero_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE Editora_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE Autor_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- Create Secao
CREATE TABLE Secao ( 
 	ID NUMBER,
 	Nome VARCHAR(50) NOT NULL,  
	 
 	CONSTRAINT pk_Secao PRIMARY KEY(ID),
	CONSTRAINT uk_Secao_Nome UNIQUE(Nome)  
); 

CREATE OR REPLACE TRIGGER gera_secao_id
BEFORE INSERT ON Secao
FOR EACH ROW
BEGIN
SELECT Secao_seq.nextval INTO :new.id FROM dual;
END;

-- Create Genero
CREATE TABLE Genero ( 
 	ID NUMBER,
 	Nome VARCHAR(100) NOT NULL,
 	ID_Secao INT NOT NULL,
	 
 	CONSTRAINT pk_Genero PRIMARY KEY(ID),
	CONSTRAINT uk_Genero UNIQUE(Nome, ID_Secao),
 	CONSTRAINT fk_Secao FOREIGN KEY(ID_Secao) 
 		REFERENCES Secao(ID) ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER gera_genero_id
BEFORE INSERT ON Genero
FOR EACH ROW
BEGIN
SELECT Genero_seq .nextval INTO :new.id FROM dual;
END;

-- Create Editora
CREATE TABLE Editora ( 
	ID NUMBER,
 	Nome VARCHAR(50) NOT NULL, 
	
 	CONSTRAINT pk_Editora PRIMARY KEY(ID),
	CONSTRAINT uk_Editora UNIQUE(Nome)
); 

CREATE OR REPLACE TRIGGER gera_editora_id
BEFORE INSERT ON Editora
FOR EACH ROW
BEGIN
SELECT Editora_seq.nextval INTO :new.id FROM dual;
END;

-- Create Livro
CREATE TABLE Livro ( 
 	ISBN NUMBER(13,0) NOT NULL,
 	Titulo VARCHAR(200),  
 	Ano INT,  
 	Preco NUMBER(10,2) NOT NULL,  
 	Estoque INT NOT NULL,  
 	Descricao VARCHAR(3000),  
 	ID_Editora INT NOT NULL,
 
	CONSTRAINT pk_Livro PRIMARY KEY (ISBN),
 	CONSTRAINT fk_Editora FOREIGN KEY (ID_Editora) 
		REFERENCES Editora(ID) ON DELETE CASCADE,
	CHECK(Preco >= 0)
);

-- Create Cliente
CREATE TABLE Cliente ( 
	CPF CHAR(11) NOT NULL,
 	Sexo CHAR(1),  
 	Data_nascimento DATE,  
 	Email VARCHAR(50) NOT NULL,    
	Pnome VARCHAR(30) NOT NULL,
 	Snome VARCHAR(50) NOT NULL,    
 	Cidade VARCHAR(30) NOT NULL,  
 	Estado CHAR(2) NOT NULL,  

 	CONSTRAINT pk_Cliente PRIMARY KEY (CPF),
	CONSTRAINT uk_Cliente UNIQUE(Email)
); 

-- Create Autor
CREATE TABLE Autor ( 
 	ID NUMBER,  
 	Pnome VARCHAR(30),
 	Snome VARCHAR(50), 
	Nacionalidade VARCHAR (20),

 	CONSTRAINT pk_Autor PRIMARY KEY(ID),
	CHECK(Pnome IS NOT NULL OR Snome IS NOT NULL)
);

CREATE OR REPLACE TRIGGER gera_autor_id
BEFORE INSERT ON Autor
FOR EACH ROW
BEGIN
SELECT Autor_seq.nextval INTO :new.id FROM dual;
END;

-- Create Compra
CREATE TABLE Compra (
    Num_Nota_Fiscal NUMBER(19) NOT NULL,
    Data_Compra DATE DEFAULT CURRENT_DATE,
    Total NUMBER(10, 2),
    CPF_Cliente CHAR(11) NOT NULL,

    CONSTRAINT pk_Compra PRIMARY KEY (Num_Nota_Fiscal),
    CONSTRAINT fk_Cliente FOREIGN KEY (CPF_Cliente)
    REFERENCES Cliente(CPF),
    CONSTRAINT chk_Total CHECK (Total > 0)
);

-- Create Escrito
CREATE TABLE Escrito ( 
 	ID_Autor INT NOT NULL,  
 	ISBN_Livro NUMBER(13,0) NOT NULL,
	 
	CONSTRAINT pk_Escrito PRIMARY KEY(ID_Autor, ISBN_Livro),
 	CONSTRAINT fk_Autor FOREIGN KEY (ID_Autor) 
		REFERENCES Autor(ID) ON DELETE CASCADE,
 	CONSTRAINT fk_Livro FOREIGN KEY (ISBN_Livro) 
		REFERENCES Livro(ISBN) ON DELETE CASCADE
); 